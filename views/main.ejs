<!DOCTYPE html>
<html>

<head>
  <title>Speak.js</title>
  <style>
    body {
      margin: 0;
      padding-bottom: 3rem;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }

    #form {
      background: rgba(0, 0, 0, 0.15);
      padding: 0.25rem;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      display: flex;
      height: 3rem;
      box-sizing: border-box;
      backdrop-filter: blur(10px);
    }

    #input {
      border: none;
      padding: 0 1rem;
      flex-grow: 1;
      border-radius: 2rem;
      margin: 0.25rem;
    }

    #input:focus {
      outline: none;
    }

    #form>button {
      background: #333;
      border: none;
      padding: 0 1rem;
      margin: 0.25rem;
      border-radius: 3px;
      outline: none;
      color: #fff;
    }

    .container {
  border: 2px solid #dedede;
  background-color: #f1f1f1;
  border-radius: 5px;
  padding: 10px;
  margin: 10px 0;
}

.darker {
  border-color: #ccc;
  background-color: #ddd;
}

.container::after {
  content: "";
  clear: both;
  display: table;
}

/* Style images */
.container img {
  float: left;
  max-width: 60px;
  width: 100%;
  margin-right: 20px;
  border-radius: 50%;
}

/* Style the right image */
.container img.right {
  float: right;
  margin-left: 20px;
  margin-right:0;
}

/* Style time text */
.time-right {
  float: right;
  color: #aaa;
}

/* Style time text */
.time-left {
  float: left;
  color: #999;
}
  </style>
</head>

<body>
  <ul id="messages"></ul>
  <form id="form" action="">
    <input id="input" autocomplete="off" /><button>Send</button>
  </form>
</body>
<script>
  var server = '<%=user.guild%>',
    socket = null
  try {
    socket = new WebSocket('ws://' + server)
  } catch (e) {
    new Error(e)
  }
  socket.onerror = function (e) {
    new Error(e)
  }
  socket.onclose = function (e) {
    console.log('connexion terminé.')
  }
  socket.onopen = function (e) {
    console.log('connexion établie avec succes')
    function getmsg() {
      console.log(JSON.parse('<%-data.msg%>'))
      JSON.parse('<%-data.msg%>').slice(Number('<%=data.number%>') < 20 ? 0 : -20).forEach(a => {
        var item = document.createElement('div')
        item.innerHTML = `<div class="container darker"><img src="${a.avatar || 'https://api.multiavatar.com/error.svg'}" alt="Avatar"><p>${a.username}:\n${a.content}</p><span class="time-left">${a.CreatedAt}</span></div>`
        messages.appendChild(item)
        window.scrollTo(0, document.body.scrollHeight)
      })
    }
    getmsg()

    socket.onmessage = function (m) {
      let e = JSON.parse(m.data)
      console.log(e)
      var request = new Request('/decrypte', {
        method: 'POST',
        body: JSON.stringify({
          'key': e.expire,
          'chaine': e.content
        }),
        headers: new Headers({
          'Content-Type': 'application/json'
        })
      })
      fetch(request).then(resp => resp.json().then(r => {
        var item = document.createElement('li')
        item.innerHTML = `<div class="container darker"><img src="${e.avatar || 'https://cdn.business2community.com/wp-content/uploads/2017/08/blank-profile-picture-973460_640.png'}" alt="Avatar"><p>${e.username}:\n${r.content}</p><span class="time-left">${e.date}</span></div>`
        messages.appendChild(item)
        window.scrollTo(0, document.body.scrollHeight)
      })).catch(err => console.error(err))
    }

    var input = document.getElementById('input')

    document.getElementById('form').addEventListener('submit', function (e) {
      e.preventDefault();
      if (input.value) {
        let ch = Date.now() + 1800000 / 2.3 * 5.5
        var request = new Request('/crypte', {
          method: 'POST',
          body: JSON.stringify({
            'key': String(ch),
            'chaine': input.value
          }),
          headers: new Headers({
            'Content-Type': 'application/json'
          })
        })
        fetch(request).then(resp => resp.json().then(r => {
          socket.send(JSON.stringify({
            username: "punchnox client web",
            content: r.content,
            event: 'msg',
            avatar: '<%=user.avatar%>',
            expire: ch
          }))
        })).catch(err => console.error(err))
        input.value = ''
      }
    })

  }
</script>

</html>